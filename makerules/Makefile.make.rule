SHELL=/bin/bash

GLOBAL_CROSS     =
GLOBAL_CC        = $(GLOBAL_CROSS)gcc
GLOBAL_CXX       = $(GLOBAL_CROSS)g++
GLOBAL_LD        = $(GLOBAL_CROSS)ld
GLOBAL_AR        = $(GLOBAL_CROSS)ar
GLOBAL_CFLAGS    = -std=c99 -Wall -fPIC $(PROJECT_CFLAGS) #-Wextra -Werror
GLOBAL_CXXFLAGS  = -std=c++11 -Wall -fPIC $(PROJECT_CXXFLAGS) #-Wextra -Werror

GLOBAL_LDFLAGS   = $(PROJECT_LDFLAGS)
GLOBAL_ARFLAGS   = rcs
GLOBAL_MAKE      = $(MAKE)
GLOBAL_MAKEFLAGS = SHELL=$(SHELL)
GLOBAL_STATIC_LIBS = $(PROJECT_STATIC_LIBS)
GLOBAL_SHARED_LIBS = $(PROJECT_SHARED_LIBS)

ROOT_DIR  = $(PROJECT_ROOT_DIR)
MAKE_RULE = $(ROOT_DIR)/makerules
OUT_DIR   = $(ROOT_DIR)/out
OBJ_DIR   = $(OUT_DIR)/obj
BIN_DIR   = $(ROOT_DIR)/release

DYLIB_EXT = .so
STLIB_EXT = .a
EXE_EXT   =

include $(MAKE_RULE)/precheck.make.rule
include $(MAKE_RULE)/project.info.make.rule
include $(MAKE_RULE)/multithread.compile.make.rule

GLOBAL_MAKEFLAGS +=

ifeq ($(strip $(ISCYGWIN)), y)
  DYLIB_EXT = .dll
  STLIB_EXT = .a
  EXE_EXT   = .exe
  GLOBAL_CFLAGS   += -D_CYGWIN_COMPILE_
  GLOBAL_CXXFLAGS += -D_CYGWIN_COMPILE_
  GLOBAL_CXXFLAGS := -std=gnu++11 $(filter-out -std=c++11, $(GLOBAL_CXXFLAGS))
endif

start: all

exclude_dirs  = $(PROJECT_EXCLUDE_DIR)

export

include $(MAKE_RULE)/submodule.make.rule

include $(MAKE_RULE)/prepare.env.make.rule
include $(MAKE_RULE)/color.print.make.rule


all: prepare
	$(MAKE) $(THREAD_ARG) $(COMPILE_SUB_MODULES) $(LINK_SUB_MODULES)
	$(MAKE) $(BUILD_SUB_MODULES)
	$(MAKE) $(THREAD_ARG) $(RELEASE_SUB_MODULES)
	$(MAKE) release
	@echo -e $(SUCCEED_COLOR)"Project $(PROJNAME) $(VERSION) build on $(PLATFORM) succeed."$(RESTORE_COLOR)

clean:
	$(MAKE) clean_internal
	@echo -e $(FINISH_COLOR)"Project $(PROJNAME) $(VERSION) all cleaned."$(RESTORE_COLOR)

clean-cache:
	rm -f `find $(ROOT_DIR) -type f -name "*.make.cache"`

clean_internal:
	$(MAKE) $(THREAD_ARG) $(CLEAN_SUB_MODULES)
	-rm -rf $(BIN_DIR)
	-git checkout $(BIN_DIR)


include $(MAKE_RULE)/find.all.modules.make.rule

release:
	fileNum=$$(find $(MODULE_DIRS) -type f -name "$(PROJNAME)$(EXE_EXT)" | wc -l); \
	if [ "$$fileNum" -ne "0" ]; then \
	  echo -e $(NOTICE_COLOR)"Copy $(PROJNAME)$(EXE_EXT) to $(BIN_DIR)..."$(RESTORE_COLOR); \
	  cp -f `find $(MODULE_DIRS) -type f -name "$(PROJNAME)$(EXE_EXT)"` $(BIN_DIR); \
	else \
	  echo -e $(WARNING_COLOR)"General project target \"$(PROJNAME)$(EXE_EXT)\" not found..."$(RESTORE_COLOR); \
	fi; \
	extraCopy=$$(echo $(strip $(PROJECT_RELEASE))); \
	if [ ! -z "$$extraCopy" ]; then \
	  for file in $$extraCopy; do \
	    echo -e $(NOTICE_COLOR)"Copy extra file \"$$file\" to $(BIN_DIR)..."$(RESTORE_COLOR); \
	    $$(cp -f `find $(MODULE_DIRS) -type f -name "$$file"` $(BIN_DIR);); \
	  done; \
	fi
	@echo -e $(FINISH_COLOR)"All libraries $(DYLIB_EXT) have been copied to $(BIN_DIR)."$(RESTORE_COLOR)

.PHONY: build all clean release external $(MAKE_SUB_MODULES) $(COMPILE_SUB_MODULES) $(LINK_SUB_MODULES) $(CLEAN_SUB_MODULES)
